// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5finfo_2eproto;
class Date;
struct DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class SetUserInfoRequest;
struct SetUserInfoRequestDefaultTypeInternal;
extern SetUserInfoRequestDefaultTypeInternal _SetUserInfoRequest_default_instance_;
class SetUserInfoResponse;
struct SetUserInfoResponseDefaultTypeInternal;
extern SetUserInfoResponseDefaultTypeInternal _SetUserInfoResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Date* Arena::CreateMaybeMessage<::Date>(Arena*);
template<> ::SetUserInfoRequest* Arena::CreateMaybeMessage<::SetUserInfoRequest>(Arena*);
template<> ::SetUserInfoResponse* Arena::CreateMaybeMessage<::SetUserInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Date final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  ~Date() override;
  explicit PROTOBUF_CONSTEXPR Date(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Date& default_instance() {
    return *internal_default_instance();
  }
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Date& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Date& from) {
    Date::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // int32 year = 1;
  void clear_year();
  int32_t year() const;
  void set_year(int32_t value);
  private:
  int32_t _internal_year() const;
  void _internal_set_year(int32_t value);
  public:

  // int32 month = 2;
  void clear_month();
  int32_t month() const;
  void set_month(int32_t value);
  private:
  int32_t _internal_month() const;
  void _internal_set_month(int32_t value);
  public:

  // int32 day = 3;
  void clear_day();
  int32_t day() const;
  void set_day(int32_t value);
  private:
  int32_t _internal_day() const;
  void _internal_set_day(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t year_;
    int32_t month_;
    int32_t day_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// -------------------------------------------------------------------

class SetUserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetUserInfoRequest) */ {
 public:
  inline SetUserInfoRequest() : SetUserInfoRequest(nullptr) {}
  ~SetUserInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR SetUserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserInfoRequest(const SetUserInfoRequest& from);
  SetUserInfoRequest(SetUserInfoRequest&& from) noexcept
    : SetUserInfoRequest() {
    *this = ::std::move(from);
  }

  inline SetUserInfoRequest& operator=(const SetUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserInfoRequest& operator=(SetUserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SetUserInfoRequest*>(
               &_SetUserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetUserInfoRequest& a, SetUserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUserInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUserInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetUserInfoRequest& from) {
    SetUserInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUserInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetUserInfoRequest";
  }
  protected:
  explicit SetUserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kEmailFieldNumber = 4,
    kPhoneNumberFieldNumber = 5,
    kDateOfBirthFieldNumber = 3,
    kTimestampFieldNumber = 6,
  };
  // string first_name = 1;
  void clear_first_name();
  const std::string& first_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_name();
  PROTOBUF_NODISCARD std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 2;
  void clear_last_name();
  const std::string& last_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_name();
  PROTOBUF_NODISCARD std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone_number = 5;
  void clear_phone_number();
  const std::string& phone_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_number();
  PROTOBUF_NODISCARD std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // .Date date_of_birth = 3;
  bool has_date_of_birth() const;
  private:
  bool _internal_has_date_of_birth() const;
  public:
  void clear_date_of_birth();
  const ::Date& date_of_birth() const;
  PROTOBUF_NODISCARD ::Date* release_date_of_birth();
  ::Date* mutable_date_of_birth();
  void set_allocated_date_of_birth(::Date* date_of_birth);
  private:
  const ::Date& _internal_date_of_birth() const;
  ::Date* _internal_mutable_date_of_birth();
  public:
  void unsafe_arena_set_allocated_date_of_birth(
      ::Date* date_of_birth);
  ::Date* unsafe_arena_release_date_of_birth();

  // .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:SetUserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
    ::Date* date_of_birth_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// -------------------------------------------------------------------

class SetUserInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:SetUserInfoResponse) */ {
 public:
  inline SetUserInfoResponse() : SetUserInfoResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetUserInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUserInfoResponse(const SetUserInfoResponse& from);
  SetUserInfoResponse(SetUserInfoResponse&& from) noexcept
    : SetUserInfoResponse() {
    *this = ::std::move(from);
  }

  inline SetUserInfoResponse& operator=(const SetUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUserInfoResponse& operator=(SetUserInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUserInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SetUserInfoResponse*>(
               &_SetUserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetUserInfoResponse& a, SetUserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUserInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUserInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUserInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetUserInfoResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetUserInfoResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetUserInfoResponse";
  }
  protected:
  explicit SetUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SetUserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_user_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Date

// int32 year = 1;
inline void Date::clear_year() {
  _impl_.year_ = 0;
}
inline int32_t Date::_internal_year() const {
  return _impl_.year_;
}
inline int32_t Date::year() const {
  // @@protoc_insertion_point(field_get:Date.year)
  return _internal_year();
}
inline void Date::_internal_set_year(int32_t value) {
  
  _impl_.year_ = value;
}
inline void Date::set_year(int32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Date.year)
}

// int32 month = 2;
inline void Date::clear_month() {
  _impl_.month_ = 0;
}
inline int32_t Date::_internal_month() const {
  return _impl_.month_;
}
inline int32_t Date::month() const {
  // @@protoc_insertion_point(field_get:Date.month)
  return _internal_month();
}
inline void Date::_internal_set_month(int32_t value) {
  
  _impl_.month_ = value;
}
inline void Date::set_month(int32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:Date.month)
}

// int32 day = 3;
inline void Date::clear_day() {
  _impl_.day_ = 0;
}
inline int32_t Date::_internal_day() const {
  return _impl_.day_;
}
inline int32_t Date::day() const {
  // @@protoc_insertion_point(field_get:Date.day)
  return _internal_day();
}
inline void Date::_internal_set_day(int32_t value) {
  
  _impl_.day_ = value;
}
inline void Date::set_day(int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Date.day)
}

// -------------------------------------------------------------------

// SetUserInfoRequest

// string first_name = 1;
inline void SetUserInfoRequest::clear_first_name() {
  _impl_.first_name_.ClearToEmpty();
}
inline const std::string& SetUserInfoRequest::first_name() const {
  // @@protoc_insertion_point(field_get:SetUserInfoRequest.first_name)
  return _internal_first_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserInfoRequest::set_first_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.first_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SetUserInfoRequest.first_name)
}
inline std::string* SetUserInfoRequest::mutable_first_name() {
  std::string* _s = _internal_mutable_first_name();
  // @@protoc_insertion_point(field_mutable:SetUserInfoRequest.first_name)
  return _s;
}
inline const std::string& SetUserInfoRequest::_internal_first_name() const {
  return _impl_.first_name_.Get();
}
inline void SetUserInfoRequest::_internal_set_first_name(const std::string& value) {
  
  _impl_.first_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::_internal_mutable_first_name() {
  
  return _impl_.first_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::release_first_name() {
  // @@protoc_insertion_point(field_release:SetUserInfoRequest.first_name)
  return _impl_.first_name_.Release();
}
inline void SetUserInfoRequest::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  _impl_.first_name_.SetAllocated(first_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.first_name_.IsDefault()) {
    _impl_.first_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SetUserInfoRequest.first_name)
}

// string last_name = 2;
inline void SetUserInfoRequest::clear_last_name() {
  _impl_.last_name_.ClearToEmpty();
}
inline const std::string& SetUserInfoRequest::last_name() const {
  // @@protoc_insertion_point(field_get:SetUserInfoRequest.last_name)
  return _internal_last_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserInfoRequest::set_last_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SetUserInfoRequest.last_name)
}
inline std::string* SetUserInfoRequest::mutable_last_name() {
  std::string* _s = _internal_mutable_last_name();
  // @@protoc_insertion_point(field_mutable:SetUserInfoRequest.last_name)
  return _s;
}
inline const std::string& SetUserInfoRequest::_internal_last_name() const {
  return _impl_.last_name_.Get();
}
inline void SetUserInfoRequest::_internal_set_last_name(const std::string& value) {
  
  _impl_.last_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::_internal_mutable_last_name() {
  
  return _impl_.last_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::release_last_name() {
  // @@protoc_insertion_point(field_release:SetUserInfoRequest.last_name)
  return _impl_.last_name_.Release();
}
inline void SetUserInfoRequest::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  _impl_.last_name_.SetAllocated(last_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_name_.IsDefault()) {
    _impl_.last_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SetUserInfoRequest.last_name)
}

// .Date date_of_birth = 3;
inline bool SetUserInfoRequest::_internal_has_date_of_birth() const {
  return this != internal_default_instance() && _impl_.date_of_birth_ != nullptr;
}
inline bool SetUserInfoRequest::has_date_of_birth() const {
  return _internal_has_date_of_birth();
}
inline void SetUserInfoRequest::clear_date_of_birth() {
  if (GetArenaForAllocation() == nullptr && _impl_.date_of_birth_ != nullptr) {
    delete _impl_.date_of_birth_;
  }
  _impl_.date_of_birth_ = nullptr;
}
inline const ::Date& SetUserInfoRequest::_internal_date_of_birth() const {
  const ::Date* p = _impl_.date_of_birth_;
  return p != nullptr ? *p : reinterpret_cast<const ::Date&>(
      ::_Date_default_instance_);
}
inline const ::Date& SetUserInfoRequest::date_of_birth() const {
  // @@protoc_insertion_point(field_get:SetUserInfoRequest.date_of_birth)
  return _internal_date_of_birth();
}
inline void SetUserInfoRequest::unsafe_arena_set_allocated_date_of_birth(
    ::Date* date_of_birth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_of_birth_);
  }
  _impl_.date_of_birth_ = date_of_birth;
  if (date_of_birth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SetUserInfoRequest.date_of_birth)
}
inline ::Date* SetUserInfoRequest::release_date_of_birth() {
  
  ::Date* temp = _impl_.date_of_birth_;
  _impl_.date_of_birth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Date* SetUserInfoRequest::unsafe_arena_release_date_of_birth() {
  // @@protoc_insertion_point(field_release:SetUserInfoRequest.date_of_birth)
  
  ::Date* temp = _impl_.date_of_birth_;
  _impl_.date_of_birth_ = nullptr;
  return temp;
}
inline ::Date* SetUserInfoRequest::_internal_mutable_date_of_birth() {
  
  if (_impl_.date_of_birth_ == nullptr) {
    auto* p = CreateMaybeMessage<::Date>(GetArenaForAllocation());
    _impl_.date_of_birth_ = p;
  }
  return _impl_.date_of_birth_;
}
inline ::Date* SetUserInfoRequest::mutable_date_of_birth() {
  ::Date* _msg = _internal_mutable_date_of_birth();
  // @@protoc_insertion_point(field_mutable:SetUserInfoRequest.date_of_birth)
  return _msg;
}
inline void SetUserInfoRequest::set_allocated_date_of_birth(::Date* date_of_birth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.date_of_birth_;
  }
  if (date_of_birth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(date_of_birth);
    if (message_arena != submessage_arena) {
      date_of_birth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_of_birth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_of_birth_ = date_of_birth;
  // @@protoc_insertion_point(field_set_allocated:SetUserInfoRequest.date_of_birth)
}

// string email = 4;
inline void SetUserInfoRequest::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& SetUserInfoRequest::email() const {
  // @@protoc_insertion_point(field_get:SetUserInfoRequest.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserInfoRequest::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SetUserInfoRequest.email)
}
inline std::string* SetUserInfoRequest::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:SetUserInfoRequest.email)
  return _s;
}
inline const std::string& SetUserInfoRequest::_internal_email() const {
  return _impl_.email_.Get();
}
inline void SetUserInfoRequest::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::release_email() {
  // @@protoc_insertion_point(field_release:SetUserInfoRequest.email)
  return _impl_.email_.Release();
}
inline void SetUserInfoRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SetUserInfoRequest.email)
}

// string phone_number = 5;
inline void SetUserInfoRequest::clear_phone_number() {
  _impl_.phone_number_.ClearToEmpty();
}
inline const std::string& SetUserInfoRequest::phone_number() const {
  // @@protoc_insertion_point(field_get:SetUserInfoRequest.phone_number)
  return _internal_phone_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetUserInfoRequest::set_phone_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phone_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SetUserInfoRequest.phone_number)
}
inline std::string* SetUserInfoRequest::mutable_phone_number() {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:SetUserInfoRequest.phone_number)
  return _s;
}
inline const std::string& SetUserInfoRequest::_internal_phone_number() const {
  return _impl_.phone_number_.Get();
}
inline void SetUserInfoRequest::_internal_set_phone_number(const std::string& value) {
  
  _impl_.phone_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::_internal_mutable_phone_number() {
  
  return _impl_.phone_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SetUserInfoRequest::release_phone_number() {
  // @@protoc_insertion_point(field_release:SetUserInfoRequest.phone_number)
  return _impl_.phone_number_.Release();
}
inline void SetUserInfoRequest::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  _impl_.phone_number_.SetAllocated(phone_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phone_number_.IsDefault()) {
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SetUserInfoRequest.phone_number)
}

// .google.protobuf.Timestamp timestamp = 6;
inline bool SetUserInfoRequest::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool SetUserInfoRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SetUserInfoRequest::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SetUserInfoRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:SetUserInfoRequest.timestamp)
  return _internal_timestamp();
}
inline void SetUserInfoRequest::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SetUserInfoRequest.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SetUserInfoRequest::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SetUserInfoRequest::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:SetUserInfoRequest.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SetUserInfoRequest::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SetUserInfoRequest::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:SetUserInfoRequest.timestamp)
  return _msg;
}
inline void SetUserInfoRequest::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:SetUserInfoRequest.timestamp)
}

// -------------------------------------------------------------------

// SetUserInfoResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_5finfo_2eproto
